generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./generated/json-schema"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password_hash String
  phone         String?
  role          Role      @default(PASSENGER)
  created_at    DateTime  @default(now())
  cpf_cnpj      String?
  cnh           String?
  bookings      Booking[]
  vans          Van[]     @relation("UserVans")

  Assessment Assessment[]
}

model Van {
  id         Int      @id @default(autoincrement())
  plate      String   @unique
  model      String
  capacity   Int
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  owner_id   Int
  routes     Route[]
  owner      User     @relation("UserVans", fields: [owner_id], references: [id])

  @@index([owner_id], map: "Van_owner_id_fkey")
}

model Route {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  pickup_type     PickupType
  start_latitude  Decimal
  start_longitude Decimal
  end_latitude    Decimal
  end_longitude   Decimal
  base_price      Decimal
  is_active       Boolean     @default(true)
  van_id          Int?
  van             Van?         @relation(fields: [van_id], references: [id], onDelete: SetNull)
  trips           Trip[]

  @@index([van_id], map: "Route_van_id_fkey")
}

model Trip {
  id                 Int        @id @default(autoincrement())
  start_time         DateTime
  estimated_end_time DateTime
  total_seats        Int
  available_seats    Int
  price              Decimal
  status             TripStatus @default(SCHEDULED)
  route_id           Int
  bookings           Booking[]
  route              Route      @relation(fields: [route_id], references: [id], onDelete: Cascade)
  stop_points     StopPoint[]

  @@index([route_id], map: "Trip_route_id_fkey")
  Assessment Assessment[]
}

model StopPoint {
  id             Int     @id @default(autoincrement())
  sequence_order Int?
  latitude       Decimal
  longitude      Decimal
  description    String?
  trip_id       Int
  booking_id     Int
  trip          Trip   @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  booking        Booking  @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade)

  @@index([trip_id], map: "StopPoint_trip_id_fkey")
}

model Booking {
  booking_id       Int           @id @default(autoincrement())
  status           BookingStatus @default(PENDING)
  created_at       DateTime      @default(now())
  trip_id          Int
  user_id          Int
  trip             Trip          @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([trip_id], map: "Booking_trip_id_fkey")
  @@index([user_id], map: "Booking_user_id_fkey")
  StopPoint StopPoint[]
}

model Assessment {
  id        Int      @id @default(autoincrement())
  rating    Int      @db.TinyInt
  feedback  String?
  created_at DateTime @default(now())

  trip_id   Int
  user_id   Int

  trip      Trip     @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([trip_id])
  @@index([user_id])
}

enum Role {
  PASSENGER
  OWNER
  ADMIN
}

enum PickupType {
  FIXED
  FLEXIBLE
}

enum TripStatus {
  SCHEDULED
  ONGOING
  FINISHED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FINISHED
}
